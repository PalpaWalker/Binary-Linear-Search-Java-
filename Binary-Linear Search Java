BinaryLinearSeach.java:
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;



/**
 * The BinaryLinearSearch class includes methods for performing binary and linear search operations on a random 32 element array, as well
 * as the time it takes to search for the selected element by the user from the array.
 */

public class BinaryLinearSearch {
    int[] randArray; // Array to store randomly generated integers
    Scanner scanner;

    
    
    
    /**
     * Creates a BinaryLinearSearch object. Initializes the randomArr array with a size of 32 and creates a Scanner object for user input.
     */
    
    public BinaryLinearSearch() {
        randArray = new int[32];	//the randArr is setting its value to 32, to be able to display the random set of 32 numbers
        scanner = new Scanner(System.in);
    }

    
    
    
    
    
    /**
     * This method is where the values in the 32 element array are generated randomly.
     * it then prints the unsorted and sorted arrays.
     */
    
    public void generateRandomInts() {
        Random rand = new Random();
        for (int i = 0; i < randArray.length; i++) {	// Generate random numbers and store them in the randomArr array
            randArray[i] = rand.nextInt(90) + 11; // Generate random numbers between 10 and 100 (exclusive)
        }
        System.out.println("Unsorted array: " + Arrays.toString(randArray));
        Arrays.sort(randArray);	// Sort the array in ascending order
        System.out.println("Sorted array: " + Arrays.toString(randArray));
    }

    
    
    
    /**
     * Performs a recursive binary search on the randomArr array, based off of the key value inputted by the user.
     * 
     * @param key  The integer value to search for.
     * @param low  The lower bound index for the search.
     * @param high The upper bound index for the search.
     * @return The index position where the key was found, or -1 if not found.
     */
    
    public int recursiveBinarySearch(int key, int low, int high) {
        if (low <= high) {
            int mid = (low + high) / 2;
            if (randArray[mid] == key) {
                System.out.println(key + " was found at index position " + mid + ": Recursive Binary Search");	// Key found at mid index using recursive binary search
                return mid;
            } else if (randArray[mid] < key) {
                return recursiveBinarySearch(key, mid + 1, high);	// Key is greater than the element at mid index, search in the right half of the array
            } else {
                return recursiveBinarySearch(key, low, mid - 1);	// Key is smaller than the element at mid index, search in the left half of the array
            }
        }
        System.out.println(key + " was not found: Recursive Binary Search");	// Key not found using recursive binary search
        return -1;
    }
    
    
    
    
    /**
     * Performs a recursive linear search on the randomArr array, based off of the key value inputted by the user.
     * 
     * @param key   The integer value to search for.
     * @param index The current index position for the search.
     * @return The index position where the key was found, or -1 if not found.
     */

    public int recursiveLinearSearch(int key, int index) {
        if (index >= randArray.length) {
            System.out.println(key + " was not found: Recursive Linear Search");	// Key not found using recursive linear search
            return -1;
        }
        if (randArray[index] == key) {
            System.out.println(key + " was found at index position " + index + ": Recursive Linear Search");	// Key found at index position using recursive linear search
            return index;
        }
        return recursiveLinearSearch(key, index + 1);	// Continue searching in the remaining elements using recursive linear search
    }

    
    
    
    
    
    
    /**
     * Performs an iterative binary search on the randomArr array, based off of the key value inputted by the user.
     * 
     * @param key The integer value to search for.
     * @return The index position where the key was found, or -1 if not found.
     */
    
    public int iterativeBinarySearch(int key) {
        int low = 0;
        int high = randArray.length - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (randArray[mid] == key) {
                System.out.println(key + " was found at index position " + mid + ": Iterative Binary Search");	// Key found at mid index using iterative binary search
                return mid;
            } else if (randArray[mid] < key) {
                low = mid + 1;	// Key is greater than the element at mid index, search in the right half of the array
            } else {
                high = mid - 1;	// Key is smaller than the element at mid index, search in the left half of the array
            }
        }
        System.out.println(key + " was not found: Iterative Binary Search");	// Key not found using iterative binary search
        return -1;
    }

    
    
    
    
    
    
    
    /**
     * Performs an iterative linear search on the randomArr array, based off of the key value inputted by the user.
     * 
     * @param key The integer value to search for.
     * @return The index position where the key was found, or -1 if not found.
     */
    
    public int iterativeLinearSearch(int key) {
        for (int i = 0; i < randArray.length; i++) {
            if (randArray[i] == key) {
                System.out.println(key + " was found at index position " + i + ": Iterative Linear Search");	// Key found at index position using iterative linear search
                return i;
            }
        }
        System.out.println(key + " was not found: Iterative Linear Search");	// Key not found using iterative linear search
        return -1;
    }

    
    
    
    
    /**
     * Gets the current time taken for the search in nanoseconds.
     * 
     * @return The current time in nanoseconds.
     */
    
    long getCurrentTimeNano() {	//getting current time in Nano-seconds
        return System.nanoTime();
    }
    
    
    
    
    
    /**
     * Prints the time taken for the search to find the value selected in both nanoseconds and milliseconds.
     * 
     * @param startTime The start time of the operation in nanoseconds.
     * @param endTime   The end time of the operation in nanoseconds.
     */

    void printcurrentTimeMillis(long startTime, long endTime) {	//printing the start and end times
        long elapsedTimeNano = endTime - startTime;	//calculating the time taken in Nano-seconds
        long elapsedTimeMillis = elapsedTimeNano / 1_000_000;	//convert that to milliseconds
        System.out.println("Time taken in nanoseconds: " + elapsedTimeNano);
        System.out.println("Time taken in milliseconds: " + elapsedTimeMillis);
    }
}//end of BinaryLinearSearch class











BinarySearchTest.java:
import java.util.Scanner;
import java.util.Arrays;
import java.util.InputMismatchException;



/**
 * The Lab3BinLinSearchTest class is a program that is able to perform recursive and iterative binary/linear searches on a random 32
 * element array. based on the menu option chosen a specific operation is performed, as well it handles any errors that could occur within
 * the selecting of the menu option process
 */

public class Lab3BinLinSearchTest {
	
	
	
	
	/**
     * The main method is is where all the menu options are displayed to the user and when each specific option is chosen a different 
     * operation will occur.
     * @param args The command-line arguments (not used).
     */
	
    public static void main(String[] args) {
        BinaryLinearSearch BinLinSearch = new BinaryLinearSearch(); // creating an object of BinaryLinearSearch class

        int choice = 0, key; // declaring instance variables

        do {
            System.out.println("\nSelect your option in the menu below:");
            System.out.println("1. Initialize and populate an array of 32 random integers.");
            System.out.println("2. Perform a recursive binary and linear search.");
            System.out.println("3. Perform iterative binary and linear search.");
            System.out.println("4. Exit");
            System.out.print("> ");

            try {
                choice = BinLinSearch.scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("*****Input Mismatch Exception*****");	//handles mismatch exception
                BinLinSearch.scanner.nextLine(); // Clear the input buffer
                continue; // Restart the loop
            }

            switch (choice) {
                case 1:
                	BinLinSearch.generateRandomInts();
                    break;

                case 2:
                    System.out.print("Please enter an integer value to search: ");

                    try {
                        key = BinLinSearch.scanner.nextInt();
                    } catch (InputMismatchException e) {
                        System.out.println("*****Input Mismatch Exception*****");
                        BinLinSearch.scanner.nextLine(); // Clear the input buffer
                        continue; // Restart the loop
                    }

                    
                    Arrays.sort(BinLinSearch.randArray);	// Sort the array before performing searches

                    System.out.println(Arrays.toString(BinLinSearch.randArray));	//prints the sorted array after deciding on the key
                    																//to search for
                    
                    //here is where the recursive binary search occurs
                    long startTime1 = BinLinSearch.getCurrentTimeNano();
                    BinLinSearch.recursiveBinarySearch(key, 0, BinLinSearch.randArray.length - 1);
                    long endTime1 = BinLinSearch.getCurrentTimeNano();
                    BinLinSearch.printcurrentTimeMillis(startTime1, endTime1);

                    
                  //here is where the recursive linear search occurs
                    long startTime2 = BinLinSearch.getCurrentTimeNano();
                    BinLinSearch.recursiveLinearSearch(key, 0);
                    long endTime2 = BinLinSearch.getCurrentTimeNano();
                    BinLinSearch.printcurrentTimeMillis(startTime2, endTime2);

                    break;

                case 3:
                    System.out.print("Please enter an integer value to search: ");

                    try {
                        key = BinLinSearch.scanner.nextInt();
                    } catch (InputMismatchException e) {
                        System.out.println("*****Input Mismatch Exception*****");
                        BinLinSearch.scanner.nextLine(); // Clear the input buffer
                        continue; // Restart the loop
                    }

                    
                    Arrays.sort(BinLinSearch.randArray);	// Sort the array before performing searches

                    System.out.println(Arrays.toString(BinLinSearch.randArray));

                    
                  //here is where the iterative binary search occurs
                    long startTime3 = BinLinSearch.getCurrentTimeNano();
                    BinLinSearch.iterativeBinarySearch(key);
                    long endTime3 = BinLinSearch.getCurrentTimeNano();
                    BinLinSearch.printcurrentTimeMillis(startTime3, endTime3);

                    
                    
                  //here is where the iterative linear search occurs
                    long startTime4 = BinLinSearch.getCurrentTimeNano();
                    BinLinSearch.iterativeLinearSearch(key);
                    long endTime4 = BinLinSearch.getCurrentTimeNano();
                    BinLinSearch.printcurrentTimeMillis(startTime4, endTime4);

                    break;

                case 4:
                    System.out.println("Exiting...");
                    break;

                default:
                    System.out.println("Please choose an option from 1 to 4.");
            }
        } while (choice != 4);

        BinLinSearch.scanner.close(); // scanner closes and doesn't allow for any more input
    }
}//end of main method
